/*
 * Generated by asn1c-0.9.29 (http://lionet.info/asn1c)
 * From ASN.1 module "NR-RRC-Definitions"
 * 	found in "NR-RRC-Definitions.asn"
 * 	`asn1c -fcompound-names -no-gen-example -pdu=all`
 */

#ifndef	_MeasAndMobParametersCommon_H_
#define	_MeasAndMobParametersCommon_H_


#include "asn_application.h"

/* Including external dependencies */
#include "BIT_STRING.h"
#include "NativeEnumerated.h"
#include "constr_SEQUENCE.h"

#ifdef __cplusplus
extern "C" {
#endif

/* Dependencies */
typedef enum MeasAndMobParametersCommon__ssb_RLM {
	MeasAndMobParametersCommon__ssb_RLM_supported	= 0
} e_MeasAndMobParametersCommon__ssb_RLM;
typedef enum MeasAndMobParametersCommon__ssb_AndCSI_RS_RLM {
	MeasAndMobParametersCommon__ssb_AndCSI_RS_RLM_supported	= 0
} e_MeasAndMobParametersCommon__ssb_AndCSI_RS_RLM;
typedef enum MeasAndMobParametersCommon__eventB_MeasAndReport {
	MeasAndMobParametersCommon__eventB_MeasAndReport_supported	= 0
} e_MeasAndMobParametersCommon__eventB_MeasAndReport;
typedef enum MeasAndMobParametersCommon__handoverFDD_TDD {
	MeasAndMobParametersCommon__handoverFDD_TDD_supported	= 0
} e_MeasAndMobParametersCommon__handoverFDD_TDD;
typedef enum MeasAndMobParametersCommon__eutra_CGI_Reporting {
	MeasAndMobParametersCommon__eutra_CGI_Reporting_supported	= 0
} e_MeasAndMobParametersCommon__eutra_CGI_Reporting;
typedef enum MeasAndMobParametersCommon__nr_CGI_Reporting {
	MeasAndMobParametersCommon__nr_CGI_Reporting_supported	= 0
} e_MeasAndMobParametersCommon__nr_CGI_Reporting;
typedef enum MeasAndMobParametersCommon__independentGapConfig {
	MeasAndMobParametersCommon__independentGapConfig_supported	= 0
} e_MeasAndMobParametersCommon__independentGapConfig;
typedef enum MeasAndMobParametersCommon__periodicEUTRA_MeasAndReport {
	MeasAndMobParametersCommon__periodicEUTRA_MeasAndReport_supported	= 0
} e_MeasAndMobParametersCommon__periodicEUTRA_MeasAndReport;
typedef enum MeasAndMobParametersCommon__handoverFR1_FR2 {
	MeasAndMobParametersCommon__handoverFR1_FR2_supported	= 0
} e_MeasAndMobParametersCommon__handoverFR1_FR2;
typedef enum MeasAndMobParametersCommon__maxNumberCSI_RS_RRM_RS_SINR {
	MeasAndMobParametersCommon__maxNumberCSI_RS_RRM_RS_SINR_n4	= 0,
	MeasAndMobParametersCommon__maxNumberCSI_RS_RRM_RS_SINR_n8	= 1,
	MeasAndMobParametersCommon__maxNumberCSI_RS_RRM_RS_SINR_n16	= 2,
	MeasAndMobParametersCommon__maxNumberCSI_RS_RRM_RS_SINR_n32	= 3,
	MeasAndMobParametersCommon__maxNumberCSI_RS_RRM_RS_SINR_n64	= 4,
	MeasAndMobParametersCommon__maxNumberCSI_RS_RRM_RS_SINR_n96	= 5
} e_MeasAndMobParametersCommon__maxNumberCSI_RS_RRM_RS_SINR;
typedef enum MeasAndMobParametersCommon__nr_CGI_Reporting_ENDC {
	MeasAndMobParametersCommon__nr_CGI_Reporting_ENDC_supported	= 0
} e_MeasAndMobParametersCommon__nr_CGI_Reporting_ENDC;
typedef enum MeasAndMobParametersCommon__eutra_CGI_Reporting_NEDC {
	MeasAndMobParametersCommon__eutra_CGI_Reporting_NEDC_supported	= 0
} e_MeasAndMobParametersCommon__eutra_CGI_Reporting_NEDC;
typedef enum MeasAndMobParametersCommon__eutra_CGI_Reporting_NRDC {
	MeasAndMobParametersCommon__eutra_CGI_Reporting_NRDC_supported	= 0
} e_MeasAndMobParametersCommon__eutra_CGI_Reporting_NRDC;
typedef enum MeasAndMobParametersCommon__nr_CGI_Reporting_NEDC {
	MeasAndMobParametersCommon__nr_CGI_Reporting_NEDC_supported	= 0
} e_MeasAndMobParametersCommon__nr_CGI_Reporting_NEDC;
typedef enum MeasAndMobParametersCommon__nr_CGI_Reporting_NRDC {
	MeasAndMobParametersCommon__nr_CGI_Reporting_NRDC_supported	= 0
} e_MeasAndMobParametersCommon__nr_CGI_Reporting_NRDC;
typedef enum MeasAndMobParametersCommon__reportAddNeighMeasForPeriodic_r16 {
	MeasAndMobParametersCommon__reportAddNeighMeasForPeriodic_r16_supported	= 0
} e_MeasAndMobParametersCommon__reportAddNeighMeasForPeriodic_r16;
typedef enum MeasAndMobParametersCommon__condHandoverParametersCommon_r16__condHandoverFDD_TDD_r16 {
	MeasAndMobParametersCommon__condHandoverParametersCommon_r16__condHandoverFDD_TDD_r16_supported	= 0
} e_MeasAndMobParametersCommon__condHandoverParametersCommon_r16__condHandoverFDD_TDD_r16;
typedef enum MeasAndMobParametersCommon__condHandoverParametersCommon_r16__condHandoverFR1_FR2_r16 {
	MeasAndMobParametersCommon__condHandoverParametersCommon_r16__condHandoverFR1_FR2_r16_supported	= 0
} e_MeasAndMobParametersCommon__condHandoverParametersCommon_r16__condHandoverFR1_FR2_r16;
typedef enum MeasAndMobParametersCommon__nr_NeedForGap_Reporting_r16 {
	MeasAndMobParametersCommon__nr_NeedForGap_Reporting_r16_supported	= 0
} e_MeasAndMobParametersCommon__nr_NeedForGap_Reporting_r16;
typedef enum MeasAndMobParametersCommon__supportedGapPattern_NRonly_NEDC_r16 {
	MeasAndMobParametersCommon__supportedGapPattern_NRonly_NEDC_r16_supported	= 0
} e_MeasAndMobParametersCommon__supportedGapPattern_NRonly_NEDC_r16;
typedef enum MeasAndMobParametersCommon__maxNumberCLI_RSSI_r16 {
	MeasAndMobParametersCommon__maxNumberCLI_RSSI_r16_n8	= 0,
	MeasAndMobParametersCommon__maxNumberCLI_RSSI_r16_n16	= 1,
	MeasAndMobParametersCommon__maxNumberCLI_RSSI_r16_n32	= 2,
	MeasAndMobParametersCommon__maxNumberCLI_RSSI_r16_n64	= 3
} e_MeasAndMobParametersCommon__maxNumberCLI_RSSI_r16;
typedef enum MeasAndMobParametersCommon__maxNumberCLI_SRS_RSRP_r16 {
	MeasAndMobParametersCommon__maxNumberCLI_SRS_RSRP_r16_n4	= 0,
	MeasAndMobParametersCommon__maxNumberCLI_SRS_RSRP_r16_n8	= 1,
	MeasAndMobParametersCommon__maxNumberCLI_SRS_RSRP_r16_n16	= 2,
	MeasAndMobParametersCommon__maxNumberCLI_SRS_RSRP_r16_n32	= 3
} e_MeasAndMobParametersCommon__maxNumberCLI_SRS_RSRP_r16;
typedef enum MeasAndMobParametersCommon__maxNumberPerSlotCLI_SRS_RSRP_r16 {
	MeasAndMobParametersCommon__maxNumberPerSlotCLI_SRS_RSRP_r16_n2	= 0,
	MeasAndMobParametersCommon__maxNumberPerSlotCLI_SRS_RSRP_r16_n4	= 1,
	MeasAndMobParametersCommon__maxNumberPerSlotCLI_SRS_RSRP_r16_n8	= 2
} e_MeasAndMobParametersCommon__maxNumberPerSlotCLI_SRS_RSRP_r16;
typedef enum MeasAndMobParametersCommon__mfbi_IAB_r16 {
	MeasAndMobParametersCommon__mfbi_IAB_r16_supported	= 0
} e_MeasAndMobParametersCommon__mfbi_IAB_r16;
typedef enum MeasAndMobParametersCommon__multipleNS_And_Pmax_IAB_r16 {
	MeasAndMobParametersCommon__multipleNS_And_Pmax_IAB_r16_supported	= 0
} e_MeasAndMobParametersCommon__multipleNS_And_Pmax_IAB_r16;
typedef enum MeasAndMobParametersCommon__nr_CGI_Reporting_NPN_r16 {
	MeasAndMobParametersCommon__nr_CGI_Reporting_NPN_r16_supported	= 0
} e_MeasAndMobParametersCommon__nr_CGI_Reporting_NPN_r16;
typedef enum MeasAndMobParametersCommon__idleInactiveEUTRA_MeasReport_r16 {
	MeasAndMobParametersCommon__idleInactiveEUTRA_MeasReport_r16_supported	= 0
} e_MeasAndMobParametersCommon__idleInactiveEUTRA_MeasReport_r16;
typedef enum MeasAndMobParametersCommon__idleInactive_ValidityArea_r16 {
	MeasAndMobParametersCommon__idleInactive_ValidityArea_r16_supported	= 0
} e_MeasAndMobParametersCommon__idleInactive_ValidityArea_r16;
typedef enum MeasAndMobParametersCommon__eutra_AutonomousGaps_r16 {
	MeasAndMobParametersCommon__eutra_AutonomousGaps_r16_supported	= 0
} e_MeasAndMobParametersCommon__eutra_AutonomousGaps_r16;
typedef enum MeasAndMobParametersCommon__eutra_AutonomousGaps_NEDC_r16 {
	MeasAndMobParametersCommon__eutra_AutonomousGaps_NEDC_r16_supported	= 0
} e_MeasAndMobParametersCommon__eutra_AutonomousGaps_NEDC_r16;
typedef enum MeasAndMobParametersCommon__eutra_AutonomousGaps_NRDC_r16 {
	MeasAndMobParametersCommon__eutra_AutonomousGaps_NRDC_r16_supported	= 0
} e_MeasAndMobParametersCommon__eutra_AutonomousGaps_NRDC_r16;
typedef enum MeasAndMobParametersCommon__pcellT312_r16 {
	MeasAndMobParametersCommon__pcellT312_r16_supported	= 0
} e_MeasAndMobParametersCommon__pcellT312_r16;

/* MeasAndMobParametersCommon */
typedef struct MeasAndMobParametersCommon {
	BIT_STRING_t	*supportedGapPattern	/* OPTIONAL */;
	long	*ssb_RLM	/* OPTIONAL */;
	long	*ssb_AndCSI_RS_RLM	/* OPTIONAL */;
	/*
	 * This type is extensible,
	 * possible extensions are below.
	 */
	long	*eventB_MeasAndReport	/* OPTIONAL */;
	long	*handoverFDD_TDD	/* OPTIONAL */;
	long	*eutra_CGI_Reporting	/* OPTIONAL */;
	long	*nr_CGI_Reporting	/* OPTIONAL */;
	long	*independentGapConfig	/* OPTIONAL */;
	long	*periodicEUTRA_MeasAndReport	/* OPTIONAL */;
	long	*handoverFR1_FR2	/* OPTIONAL */;
	long	*maxNumberCSI_RS_RRM_RS_SINR	/* OPTIONAL */;
	long	*nr_CGI_Reporting_ENDC	/* OPTIONAL */;
	long	*eutra_CGI_Reporting_NEDC	/* OPTIONAL */;
	long	*eutra_CGI_Reporting_NRDC	/* OPTIONAL */;
	long	*nr_CGI_Reporting_NEDC	/* OPTIONAL */;
	long	*nr_CGI_Reporting_NRDC	/* OPTIONAL */;
	long	*reportAddNeighMeasForPeriodic_r16	/* OPTIONAL */;
	struct MeasAndMobParametersCommon__condHandoverParametersCommon_r16 {
		long	*condHandoverFDD_TDD_r16	/* OPTIONAL */;
		long	*condHandoverFR1_FR2_r16	/* OPTIONAL */;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *condHandoverParametersCommon_r16;
	long	*nr_NeedForGap_Reporting_r16	/* OPTIONAL */;
	BIT_STRING_t	*supportedGapPattern_NRonly_r16	/* OPTIONAL */;
	long	*supportedGapPattern_NRonly_NEDC_r16	/* OPTIONAL */;
	long	*maxNumberCLI_RSSI_r16	/* OPTIONAL */;
	long	*maxNumberCLI_SRS_RSRP_r16	/* OPTIONAL */;
	long	*maxNumberPerSlotCLI_SRS_RSRP_r16	/* OPTIONAL */;
	long	*mfbi_IAB_r16	/* OPTIONAL */;
	long	*multipleNS_And_Pmax_IAB_r16	/* OPTIONAL */;
	long	*nr_CGI_Reporting_NPN_r16	/* OPTIONAL */;
	long	*idleInactiveEUTRA_MeasReport_r16	/* OPTIONAL */;
	long	*idleInactive_ValidityArea_r16	/* OPTIONAL */;
	long	*eutra_AutonomousGaps_r16	/* OPTIONAL */;
	long	*eutra_AutonomousGaps_NEDC_r16	/* OPTIONAL */;
	long	*eutra_AutonomousGaps_NRDC_r16	/* OPTIONAL */;
	long	*pcellT312_r16	/* OPTIONAL */;
	BIT_STRING_t	*supportedGapPattern_r16	/* OPTIONAL */;
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} MeasAndMobParametersCommon_t;

/* Implementation */
/* extern asn_TYPE_descriptor_t asn_DEF_ssb_RLM_3;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_ssb_AndCSI_RS_RLM_5;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_eventB_MeasAndReport_8;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_handoverFDD_TDD_10;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_eutra_CGI_Reporting_12;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_nr_CGI_Reporting_14;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_independentGapConfig_16;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_periodicEUTRA_MeasAndReport_18;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_handoverFR1_FR2_20;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_maxNumberCSI_RS_RRM_RS_SINR_22;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_nr_CGI_Reporting_ENDC_29;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_eutra_CGI_Reporting_NEDC_31;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_eutra_CGI_Reporting_NRDC_33;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_nr_CGI_Reporting_NEDC_35;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_nr_CGI_Reporting_NRDC_37;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_reportAddNeighMeasForPeriodic_r16_39;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_condHandoverFDD_TDD_r16_42;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_condHandoverFR1_FR2_r16_44;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_nr_NeedForGap_Reporting_r16_46;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_supportedGapPattern_NRonly_NEDC_r16_49;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_maxNumberCLI_RSSI_r16_51;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_maxNumberCLI_SRS_RSRP_r16_56;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_maxNumberPerSlotCLI_SRS_RSRP_r16_61;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_mfbi_IAB_r16_65;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_multipleNS_And_Pmax_IAB_r16_67;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_nr_CGI_Reporting_NPN_r16_69;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_idleInactiveEUTRA_MeasReport_r16_71;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_idleInactive_ValidityArea_r16_73;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_eutra_AutonomousGaps_r16_75;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_eutra_AutonomousGaps_NEDC_r16_77;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_eutra_AutonomousGaps_NRDC_r16_79;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_pcellT312_r16_81;	// (Use -fall-defs-global to expose) */
extern asn_TYPE_descriptor_t asn_DEF_MeasAndMobParametersCommon;
extern asn_SEQUENCE_specifics_t asn_SPC_MeasAndMobParametersCommon_specs_1;
extern asn_TYPE_member_t asn_MBR_MeasAndMobParametersCommon_1[34];

#ifdef __cplusplus
}
#endif

#endif	/* _MeasAndMobParametersCommon_H_ */
#include "asn_internal.h"
