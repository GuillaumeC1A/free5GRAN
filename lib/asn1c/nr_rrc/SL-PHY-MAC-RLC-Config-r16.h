/*
 * Generated by asn1c-0.9.29 (http://lionet.info/asn1c)
 * From ASN.1 module "NR-RRC-Definitions"
 * 	found in "NR-RRC-Definitions.asn"
 * 	`asn1c -fcompound-names -no-gen-example -pdu=all`
 */

#ifndef	_SL_PHY_MAC_RLC_Config_r16_H_
#define	_SL_PHY_MAC_RLC_Config_r16_H_


#include "asn_application.h"

/* Including external dependencies */
#include "NativeEnumerated.h"
#include "NativeInteger.h"
#include "NULL.h"
#include "SL-ScheduledConfig-r16.h"
#include "constr_CHOICE.h"
#include "SL-UE-SelectedConfig-r16.h"
#include "SL-Freq-Id-r16.h"
#include "asn_SEQUENCE_OF.h"
#include "constr_SEQUENCE_OF.h"
#include "SL-RLC-BearerConfigIndex-r16.h"
#include "SchedulingRequestId.h"
#include "constr_SEQUENCE.h"

#ifdef __cplusplus
extern "C" {
#endif

/* Dependencies */
typedef enum SL_PHY_MAC_RLC_Config_r16__sl_ScheduledConfig_r16_PR {
	SL_PHY_MAC_RLC_Config_r16__sl_ScheduledConfig_r16_PR_NOTHING,	/* No components present */
	SL_PHY_MAC_RLC_Config_r16__sl_ScheduledConfig_r16_PR_release,
	SL_PHY_MAC_RLC_Config_r16__sl_ScheduledConfig_r16_PR_setup
} SL_PHY_MAC_RLC_Config_r16__sl_ScheduledConfig_r16_PR;
typedef enum SL_PHY_MAC_RLC_Config_r16__sl_UE_SelectedConfig_r16_PR {
	SL_PHY_MAC_RLC_Config_r16__sl_UE_SelectedConfig_r16_PR_NOTHING,	/* No components present */
	SL_PHY_MAC_RLC_Config_r16__sl_UE_SelectedConfig_r16_PR_release,
	SL_PHY_MAC_RLC_Config_r16__sl_UE_SelectedConfig_r16_PR_setup
} SL_PHY_MAC_RLC_Config_r16__sl_UE_SelectedConfig_r16_PR;
typedef enum SL_PHY_MAC_RLC_Config_r16__sl_MaxNumConsecutiveDTX_r16 {
	SL_PHY_MAC_RLC_Config_r16__sl_MaxNumConsecutiveDTX_r16_n1	= 0,
	SL_PHY_MAC_RLC_Config_r16__sl_MaxNumConsecutiveDTX_r16_n2	= 1,
	SL_PHY_MAC_RLC_Config_r16__sl_MaxNumConsecutiveDTX_r16_n3	= 2,
	SL_PHY_MAC_RLC_Config_r16__sl_MaxNumConsecutiveDTX_r16_n4	= 3,
	SL_PHY_MAC_RLC_Config_r16__sl_MaxNumConsecutiveDTX_r16_n6	= 4,
	SL_PHY_MAC_RLC_Config_r16__sl_MaxNumConsecutiveDTX_r16_n8	= 5,
	SL_PHY_MAC_RLC_Config_r16__sl_MaxNumConsecutiveDTX_r16_n16	= 6,
	SL_PHY_MAC_RLC_Config_r16__sl_MaxNumConsecutiveDTX_r16_n32	= 7
} e_SL_PHY_MAC_RLC_Config_r16__sl_MaxNumConsecutiveDTX_r16;
typedef enum SL_PHY_MAC_RLC_Config_r16__sl_CSI_Acquisition_r16 {
	SL_PHY_MAC_RLC_Config_r16__sl_CSI_Acquisition_r16_enabled	= 0
} e_SL_PHY_MAC_RLC_Config_r16__sl_CSI_Acquisition_r16;
typedef enum SL_PHY_MAC_RLC_Config_r16__sl_CSI_SchedulingRequestId_r16_PR {
	SL_PHY_MAC_RLC_Config_r16__sl_CSI_SchedulingRequestId_r16_PR_NOTHING,	/* No components present */
	SL_PHY_MAC_RLC_Config_r16__sl_CSI_SchedulingRequestId_r16_PR_release,
	SL_PHY_MAC_RLC_Config_r16__sl_CSI_SchedulingRequestId_r16_PR_setup
} SL_PHY_MAC_RLC_Config_r16__sl_CSI_SchedulingRequestId_r16_PR;
typedef enum SL_PHY_MAC_RLC_Config_r16__networkControlledSyncTx_r16 {
	SL_PHY_MAC_RLC_Config_r16__networkControlledSyncTx_r16_on	= 0,
	SL_PHY_MAC_RLC_Config_r16__networkControlledSyncTx_r16_off	= 1
} e_SL_PHY_MAC_RLC_Config_r16__networkControlledSyncTx_r16;

/* Forward declarations */
struct SL_FreqConfig_r16;
struct SL_RLC_BearerConfig_r16;

/* SL-PHY-MAC-RLC-Config-r16 */
typedef struct SL_PHY_MAC_RLC_Config_r16 {
	struct SL_PHY_MAC_RLC_Config_r16__sl_ScheduledConfig_r16 {
		SL_PHY_MAC_RLC_Config_r16__sl_ScheduledConfig_r16_PR present;
		union SL_PHY_MAC_RLC_Config_r16__sl_ScheduledConfig_r16_u {
			NULL_t	 release;
			SL_ScheduledConfig_r16_t	 setup;
		} choice;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *sl_ScheduledConfig_r16;
	struct SL_PHY_MAC_RLC_Config_r16__sl_UE_SelectedConfig_r16 {
		SL_PHY_MAC_RLC_Config_r16__sl_UE_SelectedConfig_r16_PR present;
		union SL_PHY_MAC_RLC_Config_r16__sl_UE_SelectedConfig_r16_u {
			NULL_t	 release;
			SL_UE_SelectedConfig_r16_t	 setup;
		} choice;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *sl_UE_SelectedConfig_r16;
	struct SL_PHY_MAC_RLC_Config_r16__sl_FreqInfoToReleaseList_r16 {
		A_SEQUENCE_OF(SL_Freq_Id_r16_t) list;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *sl_FreqInfoToReleaseList_r16;
	struct SL_PHY_MAC_RLC_Config_r16__sl_FreqInfoToAddModList_r16 {
		A_SEQUENCE_OF(struct SL_FreqConfig_r16) list;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *sl_FreqInfoToAddModList_r16;
	struct SL_PHY_MAC_RLC_Config_r16__sl_RLC_BearerToReleaseList_r16 {
		A_SEQUENCE_OF(SL_RLC_BearerConfigIndex_r16_t) list;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *sl_RLC_BearerToReleaseList_r16;
	struct SL_PHY_MAC_RLC_Config_r16__sl_RLC_BearerToAddModList_r16 {
		A_SEQUENCE_OF(struct SL_RLC_BearerConfig_r16) list;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *sl_RLC_BearerToAddModList_r16;
	long	*sl_MaxNumConsecutiveDTX_r16	/* OPTIONAL */;
	long	*sl_CSI_Acquisition_r16	/* OPTIONAL */;
	struct SL_PHY_MAC_RLC_Config_r16__sl_CSI_SchedulingRequestId_r16 {
		SL_PHY_MAC_RLC_Config_r16__sl_CSI_SchedulingRequestId_r16_PR present;
		union SL_PHY_MAC_RLC_Config_r16__sl_CSI_SchedulingRequestId_r16_u {
			NULL_t	 release;
			SchedulingRequestId_t	 setup;
		} choice;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *sl_CSI_SchedulingRequestId_r16;
	long	*sl_SSB_PriorityNR_r16	/* OPTIONAL */;
	long	*networkControlledSyncTx_r16	/* OPTIONAL */;
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} SL_PHY_MAC_RLC_Config_r16_t;

/* Implementation */
/* extern asn_TYPE_descriptor_t asn_DEF_sl_MaxNumConsecutiveDTX_r16_16;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_sl_CSI_Acquisition_r16_25;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_networkControlledSyncTx_r16_31;	// (Use -fall-defs-global to expose) */
extern asn_TYPE_descriptor_t asn_DEF_SL_PHY_MAC_RLC_Config_r16;
extern asn_SEQUENCE_specifics_t asn_SPC_SL_PHY_MAC_RLC_Config_r16_specs_1;
extern asn_TYPE_member_t asn_MBR_SL_PHY_MAC_RLC_Config_r16_1[11];

#ifdef __cplusplus
}
#endif

/* Referred external types */
#include "SL-FreqConfig-r16.h"
#include "SL-RLC-BearerConfig-r16.h"

#endif	/* _SL_PHY_MAC_RLC_Config_r16_H_ */
#include "asn_internal.h"
