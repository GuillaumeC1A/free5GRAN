/*
 * Generated by asn1c-0.9.29 (http://lionet.info/asn1c)
 * From ASN.1 module "NR-RRC-Definitions"
 * 	found in "NR-RRC-Definitions.asn"
 * 	`asn1c -fcompound-names -no-gen-example -pdu=all`
 */

#ifndef	_UplinkConfig_H_
#define	_UplinkConfig_H_


#include "asn_application.h"

/* Including external dependencies */
#include "BWP-Id.h"
#include "BOOLEAN.h"
#include "NativeEnumerated.h"
#include "asn_SEQUENCE_OF.h"
#include "constr_SEQUENCE_OF.h"
#include "NULL.h"
#include "PUSCH-ServingCellConfig.h"
#include "constr_CHOICE.h"
#include "SRS-CarrierSwitching.h"
#include "UplinkTxSwitching-r16.h"
#include "constr_SEQUENCE.h"

#ifdef __cplusplus
extern "C" {
#endif

/* Dependencies */
typedef enum UplinkConfig__pusch_ServingCellConfig_PR {
	UplinkConfig__pusch_ServingCellConfig_PR_NOTHING,	/* No components present */
	UplinkConfig__pusch_ServingCellConfig_PR_release,
	UplinkConfig__pusch_ServingCellConfig_PR_setup
} UplinkConfig__pusch_ServingCellConfig_PR;
typedef enum UplinkConfig__carrierSwitching_PR {
	UplinkConfig__carrierSwitching_PR_NOTHING,	/* No components present */
	UplinkConfig__carrierSwitching_PR_release,
	UplinkConfig__carrierSwitching_PR_setup
} UplinkConfig__carrierSwitching_PR;
typedef enum UplinkConfig__enablePL_RS_UpdateForPUSCH_SRS_r16 {
	UplinkConfig__enablePL_RS_UpdateForPUSCH_SRS_r16_enabled	= 0
} e_UplinkConfig__enablePL_RS_UpdateForPUSCH_SRS_r16;
typedef enum UplinkConfig__enableDefaultBeamPL_ForPUSCH0_0_r16 {
	UplinkConfig__enableDefaultBeamPL_ForPUSCH0_0_r16_enabled	= 0
} e_UplinkConfig__enableDefaultBeamPL_ForPUSCH0_0_r16;
typedef enum UplinkConfig__enableDefaultBeamPL_ForPUCCH_r16 {
	UplinkConfig__enableDefaultBeamPL_ForPUCCH_r16_enabled	= 0
} e_UplinkConfig__enableDefaultBeamPL_ForPUCCH_r16;
typedef enum UplinkConfig__enableDefaultBeamPL_ForSRS_r16 {
	UplinkConfig__enableDefaultBeamPL_ForSRS_r16_enabled	= 0
} e_UplinkConfig__enableDefaultBeamPL_ForSRS_r16;
typedef enum UplinkConfig__uplinkTxSwitching_r16_PR {
	UplinkConfig__uplinkTxSwitching_r16_PR_NOTHING,	/* No components present */
	UplinkConfig__uplinkTxSwitching_r16_PR_release,
	UplinkConfig__uplinkTxSwitching_r16_PR_setup
} UplinkConfig__uplinkTxSwitching_r16_PR;
typedef enum UplinkConfig__mpr_PowerBoost_FR2_r16 {
	UplinkConfig__mpr_PowerBoost_FR2_r16_true	= 0
} e_UplinkConfig__mpr_PowerBoost_FR2_r16;

/* Forward declarations */
struct BWP_UplinkDedicated;
struct BWP_Uplink;
struct SCS_SpecificCarrier;

/* UplinkConfig */
typedef struct UplinkConfig {
	struct BWP_UplinkDedicated	*initialUplinkBWP	/* OPTIONAL */;
	struct UplinkConfig__uplinkBWP_ToReleaseList {
		A_SEQUENCE_OF(BWP_Id_t) list;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *uplinkBWP_ToReleaseList;
	struct UplinkConfig__uplinkBWP_ToAddModList {
		A_SEQUENCE_OF(struct BWP_Uplink) list;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *uplinkBWP_ToAddModList;
	BWP_Id_t	*firstActiveUplinkBWP_Id	/* OPTIONAL */;
	struct UplinkConfig__pusch_ServingCellConfig {
		UplinkConfig__pusch_ServingCellConfig_PR present;
		union UplinkConfig__pusch_ServingCellConfig_u {
			NULL_t	 release;
			PUSCH_ServingCellConfig_t	 setup;
		} choice;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *pusch_ServingCellConfig;
	struct UplinkConfig__carrierSwitching {
		UplinkConfig__carrierSwitching_PR present;
		union UplinkConfig__carrierSwitching_u {
			NULL_t	 release;
			SRS_CarrierSwitching_t	 setup;
		} choice;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *carrierSwitching;
	/*
	 * This type is extensible,
	 * possible extensions are below.
	 */
	BOOLEAN_t	*powerBoostPi2BPSK	/* OPTIONAL */;
	struct UplinkConfig__uplinkChannelBW_PerSCS_List {
		A_SEQUENCE_OF(struct SCS_SpecificCarrier) list;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *uplinkChannelBW_PerSCS_List;
	long	*enablePL_RS_UpdateForPUSCH_SRS_r16	/* OPTIONAL */;
	long	*enableDefaultBeamPL_ForPUSCH0_0_r16	/* OPTIONAL */;
	long	*enableDefaultBeamPL_ForPUCCH_r16	/* OPTIONAL */;
	long	*enableDefaultBeamPL_ForSRS_r16	/* OPTIONAL */;
	struct UplinkConfig__uplinkTxSwitching_r16 {
		UplinkConfig__uplinkTxSwitching_r16_PR present;
		union UplinkConfig__uplinkTxSwitching_r16_u {
			NULL_t	 release;
			UplinkTxSwitching_r16_t	 setup;
		} choice;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *uplinkTxSwitching_r16;
	long	*mpr_PowerBoost_FR2_r16	/* OPTIONAL */;
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} UplinkConfig_t;

/* Implementation */
/* extern asn_TYPE_descriptor_t asn_DEF_enablePL_RS_UpdateForPUSCH_SRS_r16_18;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_enableDefaultBeamPL_ForPUSCH0_0_r16_20;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_enableDefaultBeamPL_ForPUCCH_r16_22;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_enableDefaultBeamPL_ForSRS_r16_24;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_mpr_PowerBoost_FR2_r16_29;	// (Use -fall-defs-global to expose) */
extern asn_TYPE_descriptor_t asn_DEF_UplinkConfig;
extern asn_SEQUENCE_specifics_t asn_SPC_UplinkConfig_specs_1;
extern asn_TYPE_member_t asn_MBR_UplinkConfig_1[14];

#ifdef __cplusplus
}
#endif

/* Referred external types */
#include "BWP-UplinkDedicated.h"
#include "BWP-Uplink.h"
#include "SCS-SpecificCarrier.h"

#endif	/* _UplinkConfig_H_ */
#include "asn_internal.h"
