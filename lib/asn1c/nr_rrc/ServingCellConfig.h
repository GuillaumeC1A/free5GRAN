/*
 * Generated by asn1c-0.9.29 (http://lionet.info/asn1c)
 * From ASN.1 module "NR-RRC-Definitions"
 * 	found in "NR-RRC-Definitions.asn"
 * 	`asn1c -fcompound-names -no-gen-example -pdu=all`
 */

#ifndef	_ServingCellConfig_H_
#define	_ServingCellConfig_H_


#include "asn_application.h"

/* Including external dependencies */
#include "BWP-Id.h"
#include "NativeEnumerated.h"
#include "TAG-Id.h"
#include "MeasObjectId.h"
#include "asn_SEQUENCE_OF.h"
#include "constr_SEQUENCE_OF.h"
#include "NULL.h"
#include "PDCCH-ServingCellConfig.h"
#include "constr_CHOICE.h"
#include "PDSCH-ServingCellConfig.h"
#include "CSI-MeasConfig.h"
#include "RateMatchPatternLTE-CRS.h"
#include "RateMatchPatternId.h"
#include "DormantBWP-Config-r16.h"
#include "NativeInteger.h"
#include "ChannelAccessConfig-r16.h"
#include "LTE-CRS-PatternList-r16.h"
#include "constr_SEQUENCE.h"

#ifdef __cplusplus
extern "C" {
#endif

/* Dependencies */
typedef enum ServingCellConfig__bwp_InactivityTimer {
	ServingCellConfig__bwp_InactivityTimer_ms2	= 0,
	ServingCellConfig__bwp_InactivityTimer_ms3	= 1,
	ServingCellConfig__bwp_InactivityTimer_ms4	= 2,
	ServingCellConfig__bwp_InactivityTimer_ms5	= 3,
	ServingCellConfig__bwp_InactivityTimer_ms6	= 4,
	ServingCellConfig__bwp_InactivityTimer_ms8	= 5,
	ServingCellConfig__bwp_InactivityTimer_ms10	= 6,
	ServingCellConfig__bwp_InactivityTimer_ms20	= 7,
	ServingCellConfig__bwp_InactivityTimer_ms30	= 8,
	ServingCellConfig__bwp_InactivityTimer_ms40	= 9,
	ServingCellConfig__bwp_InactivityTimer_ms50	= 10,
	ServingCellConfig__bwp_InactivityTimer_ms60	= 11,
	ServingCellConfig__bwp_InactivityTimer_ms80	= 12,
	ServingCellConfig__bwp_InactivityTimer_ms100	= 13,
	ServingCellConfig__bwp_InactivityTimer_ms200	= 14,
	ServingCellConfig__bwp_InactivityTimer_ms300	= 15,
	ServingCellConfig__bwp_InactivityTimer_ms500	= 16,
	ServingCellConfig__bwp_InactivityTimer_ms750	= 17,
	ServingCellConfig__bwp_InactivityTimer_ms1280	= 18,
	ServingCellConfig__bwp_InactivityTimer_ms1920	= 19,
	ServingCellConfig__bwp_InactivityTimer_ms2560	= 20,
	ServingCellConfig__bwp_InactivityTimer_spare10	= 21,
	ServingCellConfig__bwp_InactivityTimer_spare9	= 22,
	ServingCellConfig__bwp_InactivityTimer_spare8	= 23,
	ServingCellConfig__bwp_InactivityTimer_spare7	= 24,
	ServingCellConfig__bwp_InactivityTimer_spare6	= 25,
	ServingCellConfig__bwp_InactivityTimer_spare5	= 26,
	ServingCellConfig__bwp_InactivityTimer_spare4	= 27,
	ServingCellConfig__bwp_InactivityTimer_spare3	= 28,
	ServingCellConfig__bwp_InactivityTimer_spare2	= 29,
	ServingCellConfig__bwp_InactivityTimer_spare1	= 30
} e_ServingCellConfig__bwp_InactivityTimer;
typedef enum ServingCellConfig__pdcch_ServingCellConfig_PR {
	ServingCellConfig__pdcch_ServingCellConfig_PR_NOTHING,	/* No components present */
	ServingCellConfig__pdcch_ServingCellConfig_PR_release,
	ServingCellConfig__pdcch_ServingCellConfig_PR_setup
} ServingCellConfig__pdcch_ServingCellConfig_PR;
typedef enum ServingCellConfig__pdsch_ServingCellConfig_PR {
	ServingCellConfig__pdsch_ServingCellConfig_PR_NOTHING,	/* No components present */
	ServingCellConfig__pdsch_ServingCellConfig_PR_release,
	ServingCellConfig__pdsch_ServingCellConfig_PR_setup
} ServingCellConfig__pdsch_ServingCellConfig_PR;
typedef enum ServingCellConfig__csi_MeasConfig_PR {
	ServingCellConfig__csi_MeasConfig_PR_NOTHING,	/* No components present */
	ServingCellConfig__csi_MeasConfig_PR_release,
	ServingCellConfig__csi_MeasConfig_PR_setup
} ServingCellConfig__csi_MeasConfig_PR;
typedef enum ServingCellConfig__sCellDeactivationTimer {
	ServingCellConfig__sCellDeactivationTimer_ms20	= 0,
	ServingCellConfig__sCellDeactivationTimer_ms40	= 1,
	ServingCellConfig__sCellDeactivationTimer_ms80	= 2,
	ServingCellConfig__sCellDeactivationTimer_ms160	= 3,
	ServingCellConfig__sCellDeactivationTimer_ms200	= 4,
	ServingCellConfig__sCellDeactivationTimer_ms240	= 5,
	ServingCellConfig__sCellDeactivationTimer_ms320	= 6,
	ServingCellConfig__sCellDeactivationTimer_ms400	= 7,
	ServingCellConfig__sCellDeactivationTimer_ms480	= 8,
	ServingCellConfig__sCellDeactivationTimer_ms520	= 9,
	ServingCellConfig__sCellDeactivationTimer_ms640	= 10,
	ServingCellConfig__sCellDeactivationTimer_ms720	= 11,
	ServingCellConfig__sCellDeactivationTimer_ms840	= 12,
	ServingCellConfig__sCellDeactivationTimer_ms1280	= 13,
	ServingCellConfig__sCellDeactivationTimer_spare2	= 14,
	ServingCellConfig__sCellDeactivationTimer_spare1	= 15
} e_ServingCellConfig__sCellDeactivationTimer;
typedef enum ServingCellConfig__dummy {
	ServingCellConfig__dummy_enabled	= 0
} e_ServingCellConfig__dummy;
typedef enum ServingCellConfig__pathlossReferenceLinking {
	ServingCellConfig__pathlossReferenceLinking_spCell	= 0,
	ServingCellConfig__pathlossReferenceLinking_sCell	= 1
} e_ServingCellConfig__pathlossReferenceLinking;
typedef enum ServingCellConfig__lte_CRS_ToMatchAround_PR {
	ServingCellConfig__lte_CRS_ToMatchAround_PR_NOTHING,	/* No components present */
	ServingCellConfig__lte_CRS_ToMatchAround_PR_release,
	ServingCellConfig__lte_CRS_ToMatchAround_PR_setup
} ServingCellConfig__lte_CRS_ToMatchAround_PR;
typedef enum ServingCellConfig__supplementaryUplinkRelease {
	ServingCellConfig__supplementaryUplinkRelease_true	= 0
} e_ServingCellConfig__supplementaryUplinkRelease;
typedef enum ServingCellConfig__dormantBWP_Config_r16_PR {
	ServingCellConfig__dormantBWP_Config_r16_PR_NOTHING,	/* No components present */
	ServingCellConfig__dormantBWP_Config_r16_PR_release,
	ServingCellConfig__dormantBWP_Config_r16_PR_setup
} ServingCellConfig__dormantBWP_Config_r16_PR;
typedef enum ServingCellConfig__ca_SlotOffset_r16_PR {
	ServingCellConfig__ca_SlotOffset_r16_PR_NOTHING,	/* No components present */
	ServingCellConfig__ca_SlotOffset_r16_PR_refSCS15kHz,
	ServingCellConfig__ca_SlotOffset_r16_PR_refSCS30KHz,
	ServingCellConfig__ca_SlotOffset_r16_PR_refSCS60KHz,
	ServingCellConfig__ca_SlotOffset_r16_PR_refSCS120KHz
} ServingCellConfig__ca_SlotOffset_r16_PR;
typedef enum ServingCellConfig__channelAccessConfig_r16_PR {
	ServingCellConfig__channelAccessConfig_r16_PR_NOTHING,	/* No components present */
	ServingCellConfig__channelAccessConfig_r16_PR_release,
	ServingCellConfig__channelAccessConfig_r16_PR_setup
} ServingCellConfig__channelAccessConfig_r16_PR;
typedef enum ServingCellConfig__csi_RS_ValidationWith_DCI_r16 {
	ServingCellConfig__csi_RS_ValidationWith_DCI_r16_enabled	= 0
} e_ServingCellConfig__csi_RS_ValidationWith_DCI_r16;
typedef enum ServingCellConfig__lte_CRS_PatternList1_r16_PR {
	ServingCellConfig__lte_CRS_PatternList1_r16_PR_NOTHING,	/* No components present */
	ServingCellConfig__lte_CRS_PatternList1_r16_PR_release,
	ServingCellConfig__lte_CRS_PatternList1_r16_PR_setup
} ServingCellConfig__lte_CRS_PatternList1_r16_PR;
typedef enum ServingCellConfig__lte_CRS_PatternList2_r16_PR {
	ServingCellConfig__lte_CRS_PatternList2_r16_PR_NOTHING,	/* No components present */
	ServingCellConfig__lte_CRS_PatternList2_r16_PR_release,
	ServingCellConfig__lte_CRS_PatternList2_r16_PR_setup
} ServingCellConfig__lte_CRS_PatternList2_r16_PR;
typedef enum ServingCellConfig__crs_RateMatch_PerCORESETPoolIndex_r16 {
	ServingCellConfig__crs_RateMatch_PerCORESETPoolIndex_r16_enabled	= 0
} e_ServingCellConfig__crs_RateMatch_PerCORESETPoolIndex_r16;
typedef enum ServingCellConfig__enableTwoDefaultTCI_States_r16 {
	ServingCellConfig__enableTwoDefaultTCI_States_r16_enabled	= 0
} e_ServingCellConfig__enableTwoDefaultTCI_States_r16;
typedef enum ServingCellConfig__enableDefaultTCI_StatePerCoresetPoolIndex_r16 {
	ServingCellConfig__enableDefaultTCI_StatePerCoresetPoolIndex_r16_enabled	= 0
} e_ServingCellConfig__enableDefaultTCI_StatePerCoresetPoolIndex_r16;
typedef enum ServingCellConfig__enableBeamSwitchTiming_r16 {
	ServingCellConfig__enableBeamSwitchTiming_r16_true	= 0
} e_ServingCellConfig__enableBeamSwitchTiming_r16;
typedef enum ServingCellConfig__cbg_TxDiffTBsProcessingType1_r16 {
	ServingCellConfig__cbg_TxDiffTBsProcessingType1_r16_enabled	= 0
} e_ServingCellConfig__cbg_TxDiffTBsProcessingType1_r16;
typedef enum ServingCellConfig__cbg_TxDiffTBsProcessingType2_r16 {
	ServingCellConfig__cbg_TxDiffTBsProcessingType2_r16_enabled	= 0
} e_ServingCellConfig__cbg_TxDiffTBsProcessingType2_r16;

/* Forward declarations */
struct TDD_UL_DL_ConfigDedicated;
struct BWP_DownlinkDedicated;
struct UplinkConfig;
struct CrossCarrierSchedulingConfig;
struct TDD_UL_DL_ConfigDedicated_IAB_MT_r16;
struct BWP_Downlink;
struct RateMatchPattern;
struct SCS_SpecificCarrier;
struct IntraCellGuardBandsPerSCS_r16;

/* ServingCellConfig */
typedef struct ServingCellConfig {
	struct TDD_UL_DL_ConfigDedicated	*tdd_UL_DL_ConfigurationDedicated	/* OPTIONAL */;
	struct BWP_DownlinkDedicated	*initialDownlinkBWP	/* OPTIONAL */;
	struct ServingCellConfig__downlinkBWP_ToReleaseList {
		A_SEQUENCE_OF(BWP_Id_t) list;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *downlinkBWP_ToReleaseList;
	struct ServingCellConfig__downlinkBWP_ToAddModList {
		A_SEQUENCE_OF(struct BWP_Downlink) list;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *downlinkBWP_ToAddModList;
	BWP_Id_t	*firstActiveDownlinkBWP_Id	/* OPTIONAL */;
	long	*bwp_InactivityTimer	/* OPTIONAL */;
	BWP_Id_t	*defaultDownlinkBWP_Id	/* OPTIONAL */;
	struct UplinkConfig	*uplinkConfig	/* OPTIONAL */;
	struct UplinkConfig	*supplementaryUplink	/* OPTIONAL */;
	struct ServingCellConfig__pdcch_ServingCellConfig {
		ServingCellConfig__pdcch_ServingCellConfig_PR present;
		union ServingCellConfig__pdcch_ServingCellConfig_u {
			NULL_t	 release;
			PDCCH_ServingCellConfig_t	 setup;
		} choice;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *pdcch_ServingCellConfig;
	struct ServingCellConfig__pdsch_ServingCellConfig {
		ServingCellConfig__pdsch_ServingCellConfig_PR present;
		union ServingCellConfig__pdsch_ServingCellConfig_u {
			NULL_t	 release;
			PDSCH_ServingCellConfig_t	 setup;
		} choice;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *pdsch_ServingCellConfig;
	struct ServingCellConfig__csi_MeasConfig {
		ServingCellConfig__csi_MeasConfig_PR present;
		union ServingCellConfig__csi_MeasConfig_u {
			NULL_t	 release;
			CSI_MeasConfig_t	 setup;
		} choice;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *csi_MeasConfig;
	long	*sCellDeactivationTimer	/* OPTIONAL */;
	struct CrossCarrierSchedulingConfig	*crossCarrierSchedulingConfig	/* OPTIONAL */;
	TAG_Id_t	 tag_Id;
	long	*dummy	/* OPTIONAL */;
	long	*pathlossReferenceLinking	/* OPTIONAL */;
	MeasObjectId_t	*servingCellMO	/* OPTIONAL */;
	/*
	 * This type is extensible,
	 * possible extensions are below.
	 */
	struct ServingCellConfig__lte_CRS_ToMatchAround {
		ServingCellConfig__lte_CRS_ToMatchAround_PR present;
		union ServingCellConfig__lte_CRS_ToMatchAround_u {
			NULL_t	 release;
			RateMatchPatternLTE_CRS_t	 setup;
		} choice;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *lte_CRS_ToMatchAround;
	struct ServingCellConfig__rateMatchPatternToAddModList {
		A_SEQUENCE_OF(struct RateMatchPattern) list;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *rateMatchPatternToAddModList;
	struct ServingCellConfig__rateMatchPatternToReleaseList {
		A_SEQUENCE_OF(RateMatchPatternId_t) list;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *rateMatchPatternToReleaseList;
	struct ServingCellConfig__downlinkChannelBW_PerSCS_List {
		A_SEQUENCE_OF(struct SCS_SpecificCarrier) list;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *downlinkChannelBW_PerSCS_List;
	long	*supplementaryUplinkRelease	/* OPTIONAL */;
	struct TDD_UL_DL_ConfigDedicated_IAB_MT_r16	*tdd_UL_DL_ConfigurationDedicated_IAB_MT_r16	/* OPTIONAL */;
	struct ServingCellConfig__dormantBWP_Config_r16 {
		ServingCellConfig__dormantBWP_Config_r16_PR present;
		union ServingCellConfig__dormantBWP_Config_r16_u {
			NULL_t	 release;
			DormantBWP_Config_r16_t	 setup;
		} choice;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *dormantBWP_Config_r16;
	struct ServingCellConfig__ca_SlotOffset_r16 {
		ServingCellConfig__ca_SlotOffset_r16_PR present;
		union ServingCellConfig__ca_SlotOffset_r16_u {
			long	 refSCS15kHz;
			long	 refSCS30KHz;
			long	 refSCS60KHz;
			long	 refSCS120KHz;
		} choice;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *ca_SlotOffset_r16;
	struct ServingCellConfig__channelAccessConfig_r16 {
		ServingCellConfig__channelAccessConfig_r16_PR present;
		union ServingCellConfig__channelAccessConfig_r16_u {
			NULL_t	 release;
			ChannelAccessConfig_r16_t	 setup;
		} choice;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *channelAccessConfig_r16;
	struct ServingCellConfig__intraCellGuardBandsDL_List_r16 {
		A_SEQUENCE_OF(struct IntraCellGuardBandsPerSCS_r16) list;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *intraCellGuardBandsDL_List_r16;
	struct ServingCellConfig__intraCellGuardBandsUL_List_r16 {
		A_SEQUENCE_OF(struct IntraCellGuardBandsPerSCS_r16) list;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *intraCellGuardBandsUL_List_r16;
	long	*csi_RS_ValidationWith_DCI_r16	/* OPTIONAL */;
	struct ServingCellConfig__lte_CRS_PatternList1_r16 {
		ServingCellConfig__lte_CRS_PatternList1_r16_PR present;
		union ServingCellConfig__lte_CRS_PatternList1_r16_u {
			NULL_t	 release;
			LTE_CRS_PatternList_r16_t	 setup;
		} choice;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *lte_CRS_PatternList1_r16;
	struct ServingCellConfig__lte_CRS_PatternList2_r16 {
		ServingCellConfig__lte_CRS_PatternList2_r16_PR present;
		union ServingCellConfig__lte_CRS_PatternList2_r16_u {
			NULL_t	 release;
			LTE_CRS_PatternList_r16_t	 setup;
		} choice;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *lte_CRS_PatternList2_r16;
	long	*crs_RateMatch_PerCORESETPoolIndex_r16	/* OPTIONAL */;
	long	*enableTwoDefaultTCI_States_r16	/* OPTIONAL */;
	long	*enableDefaultTCI_StatePerCoresetPoolIndex_r16	/* OPTIONAL */;
	long	*enableBeamSwitchTiming_r16	/* OPTIONAL */;
	long	*cbg_TxDiffTBsProcessingType1_r16	/* OPTIONAL */;
	long	*cbg_TxDiffTBsProcessingType2_r16	/* OPTIONAL */;
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} ServingCellConfig_t;

/* Implementation */
/* extern asn_TYPE_descriptor_t asn_DEF_bwp_InactivityTimer_9;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_sCellDeactivationTimer_53;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_dummy_72;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_pathlossReferenceLinking_74;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_supplementaryUplinkRelease_88;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_csi_RS_ValidationWith_DCI_r16_106;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_crs_RateMatch_PerCORESETPoolIndex_r16_114;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_enableTwoDefaultTCI_States_r16_116;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_enableDefaultTCI_StatePerCoresetPoolIndex_r16_118;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_enableBeamSwitchTiming_r16_120;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_cbg_TxDiffTBsProcessingType1_r16_122;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_cbg_TxDiffTBsProcessingType2_r16_124;	// (Use -fall-defs-global to expose) */
extern asn_TYPE_descriptor_t asn_DEF_ServingCellConfig;
extern asn_SEQUENCE_specifics_t asn_SPC_ServingCellConfig_specs_1;
extern asn_TYPE_member_t asn_MBR_ServingCellConfig_1[38];

#ifdef __cplusplus
}
#endif

/* Referred external types */
#include "TDD-UL-DL-ConfigDedicated.h"
#include "BWP-DownlinkDedicated.h"
#include "UplinkConfig.h"
#include "CrossCarrierSchedulingConfig.h"
#include "TDD-UL-DL-ConfigDedicated-IAB-MT-r16.h"
#include "BWP-Downlink.h"
#include "RateMatchPattern.h"
#include "SCS-SpecificCarrier.h"
#include "IntraCellGuardBandsPerSCS-r16.h"

#endif	/* _ServingCellConfig_H_ */
#include "asn_internal.h"
